import os, sys
from os.path import join, exists
from waflib import Options, Utils
from waflib.TaskGen import feature, before, task_gen
from build import untarFile
from build import writeConfig

SOURCE        = 'openjpeg-2.3.0'

options = lambda x : None

def configure(conf):
    #conf.env['BUILD_PATH'] = conf.bldnode.abspath()
    
    j2kLayer = Options.options.j2k_layer
    if j2kLayer == 'openjpeg':
        
        # callback function to check for #defines used by the openjpg module
        def opj_callback(conf):

            # check functionality
            conf.check_cc(header_name='stdint.h', define_name='OPJ_HAVE_STDINT_H',
                          mandatory=False)

            conf.define('OPJ_VERSION_MAJOR', '2', quote=False)
            conf.define('OPJ_VERSION_MINOR', '3', quote=False)
            conf.define('OPJ_VERSION_BUILD', '0', quote=False)

        # check for the source tarball
        if not exists(join(conf.path.abspath(), SOURCE + '.tar')):
            conf.fatal('Missing OpenJPEG tarfile')

        # untar and setup env
        conf.env['MAKE_OPENJPEG'] = True
        conf.env['MAKE_J2K']      = True
        conf.env['HAVE_J2K']      = True
        conf.msg('Building local lib', j2kLayer)
        untarFile(path=conf.path, fname=SOURCE + '.tar')

        # make opj_config.h
        openjpegNode = conf.path.make_node(
                join(SOURCE, 'src', 'lib', 'openjp2'))

        writeConfig(conf, opj_callback, 'opj', infile=None,
                    outfile='opj_config.h', path=openjpegNode,
                    feature='makeHeader')

        # callback function to check for #defines used by the openjpg module
        def opj_private_callback(conf):

            # check functionality
            if conf.check_cc(function_name='fseeko', header_name='stdio.h',
                             define_name='OPJ_HAVE_FSEEKO', mandatory=False):
                conf.define('OPJ_HAVE_FSEEKO', '', quote=False)

            if conf.check_cc(header_name='sys/stat.h', mandatory=False):
                conf.define('HAVE_SYS_STAT_H', '', quote=False)
            if conf.check_cc(header_name='sys/types.h', mandatory=False):
                conf.define('HAVE_SYS_TYPES_H', '', quote=False)
            if conf.check_cc(header_name='memory.h', mandatory=False):
                conf.define('HAVE_MEMORY_H', '', quote=False)

            conf.check_cc(header_name='inttypes.h',
                          define_name='OPJ_HAVE_INTTYPES_H',
                          mandatory=False)

            if conf.check_cc(header_name='unistd.h', mandatory=False):
                conf.define('HAVE_UNISTD_H', '', quote=False)

            if conf.check_cc(header_name='fcntl.h', mandatory=False):
                conf.define('HAVE_FCNTL_H', '', quote=False)

            if conf.check_cc(function_name='mmap', header_name='sys/mman.h',
                             mandatory=False):
                conf.define('HAVE_MMAP', '', quote=False)

            if conf.check_cc(header_name='stdbool.h', mandatory=False):
                conf.define('HAVE_STDBOOL_H', '', quote=False)

            if conf.check_cc(header_name='malloc.h',
                             define_name='OPJ_HAVE_MALLOC_H', mandatory=False):
                conf.define('OPJ_HAVE_MALLOC_H', '', quote=False)

            if conf.check_cc(function_name='memalign', header_name='malloc.h',
                             define_name='OPJ_HAVE_MEMALIGN', mandatory=False):
                conf.define('OPJ_HAVE_MEMALIGN', '', quote=False)

            if conf.check_cc(function_name='_aligned_malloc',
                             header_name='malloc.h',
                             define_name='OPJ_HAVE__ALIGNED_MALLOC',
                             mandatory=False):
                conf.define('OPJ_HAVE__ALIGNED_MALLOC', '', quote=False)

            if conf.check_cc(function_name='aligned_alloc',
                             header_name='malloc.h',
                             define_name='OPJ_HAVE_ALIGNED_ALLOC',
                             mandatory=False):
                conf.define('OPJ_HAVE_ALIGNED_ALLOC', '', quote=False)

            if conf.check_cc(function_name='posix_memalign',
                             header_name='stdlib.h',
                             define_name='OPJ_HAVE_POSIX_MEMALIGN',
                             mandatory=False):
                conf.define('OPJ_HAVE_POSIX_MEMALIGN', '', quote=False)

            if '_LARGEFILE_SOURCE' in conf.env['DEFINES']:
                conf.define('_LARGEFILE_SOURCE', ' ', quote=False)
            if '_LARGE_FILES' in conf.env['DEFINES']:
                conf.define('_LARGE_FILES', ' ', quote=False)
            if '_FILE_OFFSET_BITS=64' in conf.env['DEFINES']:
                conf.define('_FILE_OFFSET_BITS', '64', quote=False)

            if '_POSIX_C_SOURCE' not in conf.env['DEFINES']:
                if 'OPJ_HAVE_FSEEKO=' in conf.env['DEFINES'] or \
                   'OPJ_HAVE_POSIX_MEMALIGN=' in conf.env['DEFINES']:
                    conf.define('_POSIX_C_SOURCE', '200112L', quote=False)

            conf.define('OPJ_PACKAGE_VERSION',  '"2.3.0"', quote=False)
            if sys.byteorder != 'little':
                conf.define('OPJ_BIG_ENDIAN', ' ', quote=False)

        # make opj_config_private.h
        writeConfig(conf, opj_private_callback, 'opj_private', infile=None,
                    outfile='opj_config_private.h', path=openjpegNode,
                    feature='makeHeader')
def build(bld):
    env = bld.get_env()

    # check it again just in case
    if 'MAKE_OPENJPEG' in env:
        # this node is a mandatory build -- others are optional
        openjpegNode = bld.path.make_node(join(SOURCE, 'src', 'lib', 'openjp2'))
        
        # build the lib
        sources = ['bio.c', 'cio.c', 'dwt.c', 'event.c', 'image.c', 'invert.c',
                   'j2k.c', 'jp2.c', 'mct.c', 'mqc.c', 'openjpeg.c',
                   'opj_clock.c', 'opj_malloc.c', 'pi.c' , 'sparse_array.c',
                   't1.c', 't2.c', 'tcd.c', 'thread.c', 'tgt.c',
                   'function_list.c']
        
        libType = env['LIB_TYPE'] or 'stlib'
        openjpeg = bld(features='c c%s ' % libType, 
                       includes=['.'], export_includes=['.'],
                       source=sources, target='openjpeg', name='J2K',
                       path=openjpegNode, env=env.derive())
        if libType == 'stlib':
            openjpeg.defines = 'OPJ_STATIC'
            openjpeg.export_defines = 'OPJ_STATIC'
        
        # install lib
        if env['install_libs']:
            openjpeg.install_path = env['install_libdir']
        
        # install headers
        if env['install_headers']:
            openjpeg.features += 'add_targets'
            openjpeg.targets_to_add=[bld(features='install_tgt', 
                    includes='openjpeg.h opj_config.h opj_stdint.h opj_config_private.h',
                    dir=openjpegNode, install_path=env['install_includedir'],
                    name='J2K_INCLUDES_INSTALL')]

def distclean(context):

    # remove the untarred directories
    import shutil
    
    dirs = filter(lambda x: exists(join(context.path.abspath(), x)), 
                  [SOURCE])

    for d in dirs:
        try:
            shutil.rmtree(join(context.path.abspath(), d), ignore_errors=True)
        except:{}

